#!py

import ipaddress


def run():
    networks = __salt__['pillar.get']('networks')

    config_file = [
        'authoritative;',
        'log-facility local7;',
        'default-lease-time 600;',
        'max-lease-time 7200;',
    ]

    ddns = __salt__['pillar.get']('ddns')
    if ddns:
        config_file.extend([
            '',
            'ddns-updates on;',
            'ddns-update-style standard;',
            'ddns-domainname "{}";'.format(ddns['zones'][0]),
            'ignore client-updates;',
            'update-static-leases on;',
            'update-conflict-detection false;',
            '',
            'key ddns {',
            '    algorithm {};'.format(ddns['algorithm']),
            '    secret "{}";'.format(ddns['secret']),
            '}'
        ])

        for zone in ddns.get('zones', []):
            config_file.extend([
                '',
                'zone {}. {{'.format(zone),
                '    primary 127.0.0.1;',
                '    key ddns;',
                '}'
            ])

    for network in networks.itervalues():
        subnet = ipaddress.IPv4Interface(network['address'].decode()).network
        config_file.extend([
            '',
            'subnet {} netmask {} {{'.format(subnet.network_address, subnet.netmask)
        ])

        dhcp_conf = network.get('dhcp')
        if not dhcp_conf:
            config_file.append('}')
            continue

        range = dhcp_conf.get('range')
        if range:
            config_file.extend([
                '    range {};'.format(range),
                ''
            ])

        def emit_option(name, key, quote=False):
            value = dhcp_conf.get(key)
            if value and quote:
               option = '    option {} "{}";'.format(name, value)
               config_file.append(option)
            elif value:
               option = '    option {} {};'.format(name, value)
               config_file.append(option)

        emit_option('domain-name', 'domain', quote=True)
        emit_option('domain-name-servers', 'dns')
        emit_option('domain-search', 'domain', quote=True)

        if range:
            config_file.append('    option routers {};'.format(next(subnet.hosts())))

        config_file.append('}')

    return '\n'.join(config_file) + '\n'
